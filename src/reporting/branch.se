# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

##### must be first data members to match delegator.se
data controller
data controllerLookupName
#####

macro BRANCH_FACTORY: self.controller.lookup('branchFactory')
macro REPUTATION_TOKEN_FACTORY: self.controller.lookup('reputationTokenFactory')
macro REPORTING_WINDOW_FACTORY: self.controller.lookup('reportingWindowFactory')
macro TOPICS_FACTORY: self.controller.lookup('topicsFactory')

inset('../macros/externs.sem')
inset('../macros/unitConversions.sem')
inset('../macros/assertNoValue.sem')
inset('../macros/require.sem')
inset('../macros/durations.sem')

data initialized
data parentBranch
data reputationToken
data childBranches[]
data reportingWindows[]
# this branch is the universe where the parentBranch.forkingMarket outcomes were paid out using the payout distribution assotiated with parentPayoutDistributionHash
data parentPayoutDistributionHash
# the market that terminates this branch in a fork (0 until a fork occurs)
data forkingMarket
# the timestamp at which the fork ends (0 until a fork occurs)
data forkEndTime
data topics

def any():
    assertNoValue()

def initialize(parentBranch: address, parentPayoutDistributionHash: int256):
    require(not initialized)
    self.initialized = 1
    self.parentBranch = parentBranch
    self.parentPayoutDistributionHash = parentPayoutDistributionHash
    self.reputationToken = REPUTATION_TOKEN_FACTORY.createReputationToken(self.controller, self)
    self.topics = TOPICS_FACTORY.createTopics(self.controller)
    require(self.reputationToken)

def fork(shadyMarket: address):
    require(msg.sender == shadyMarket)
    require(not self.forkingMarket)
    require(self.isContainerForMarket(shadyMarket))
    self.forkingMarket = shadyMarket
    self.forkEndTime = block.timestamp + 60*SECONDS_PER_DAY


####
#### Getters
####

def getParentBranch():
    return(self.parentBranch)

def getParentPayoutDistributionHash():
    return(self.parentPayoutDistributionHash)

def getReputationToken():
    return(self.reputationToken)

def getForkingMarket():
    return(self.forkingMarket)

def getForkEndTime():
    return(self.forkEndTime)

def getTopics():
    return(self.topics)

def getReportingWindowId(timestamp: int256):
    return(timestamp / self.getReportingPeriodDurationInSeconds())

def getReportingPeriodDurationInSeconds():
    return(REPORTING_DURATION_SECONDS + REPORTING_DISPUTE_DURATION_SECONDS)

def getReportingWindowByTimestamp(timestamp: int256):
    windowId = self.getReportingWindowId(timestamp)
    if (not self.reportingWindows[windowId]):
        self.reportingWindows[windowId] = REPORTING_WINDOW_FACTORY.createReportingWindow(self.controller, self, windowId)
    return(self.reportingWindows[windowId])

def getReportingWindowByMarketEndTime(endTime: int256, hasAutomatedReporter: int256):
    require(hasAutomatedReporter == 0 or hasAutomatedReporter == 1)
    if (hasAutomatedReporter):
        return(self.getReportingWindowByTimestamp(endTime + AUTOMATED_REPORTING_DURATION_SECONDS + AUTOMATED_REPORTING_DISPUTE_DURATION_SECONDS + 1 + self.getReportingPeriodDurationInSeconds()))
    else:
        return(self.getReportingWindowByTimestamp(endTime + 1 + self.getReportingPeriodDurationInSeconds()))

def getCurrentReportingWindow():
    return(self.getReportingWindowByTimestamp(block.timestamp))

def getNextReportingWindow():
    return(self.getReportingWindowByTimestamp(block.timestamp + self.getReportingPeriodDurationInSeconds()))

def getChildBranch(parentPayoutDistributionHash: int256):
    if (not self.childBranches[parentPayoutDistributionHash]):
        self.childBranches[parentPayoutDistributionHash] = BRANCH_FACTORY.createBranch(self.controller, self, parentPayoutDistributionHash)
    return(self.childBranches[parentPayoutDistributionHash])

def isContainerForReportingWindow(shadyReportingWindow: address):
    startTime = shadyReportingWindow.getStartTime()
    if (not startTime):
        return(0)
    reportingWindowId = self.getReportingWindowId(startTime)
    legitReportingWindow = self.reportingWindows[reportingWindowId]
    return(legitReportingWindow == shadyReportingWindow)

def isContainerForRegistrationToken(shadyRegistrationToken: address):
    shadyReportingWindow = shadyRegistrationToken.getReportingWindow()
    if (not shadyReportingWindow):
        return(0)
    if (not self.isContainerForReportingWindow(shadyReportingWindow)):
        return(0)
    legitReportingWindow = shadyReportingWindow
    return(legitReportingWindow.isContainerForRegistrationToken(shadyRegistrationToken))

def isContainerForMarket(shadyMarket: address):
    shadyReportingWindow = shadyMarket.getReportingWindow()
    if (not shadyReportingWindow):
        return(0)
    if (not self.isContainerForReportingWindow(shadyReportingWindow)):
        return(0)
    legitReportingWindow = shadyReportingWindow
    return(legitReportingWindow.isContainerForMarket(shadyMarket))

def isContainerForReportingToken(shadyReportingToken: address):
    shadyMarket = shadyReportingToken.getMarket()
    if (not shadyMarket):
        return(0)
    if (not self.isContainerForMarket(shadyMarket)):
        return(0)
    legitMarket = shadyMarket
    return(legitMarket.isContainerForReportingToken(shadyReportingToken))

def isParentOf(shadyChild: address):
    branchId = shadyChild.getParentPayoutDistributionHash()
    return(self.childBranches[branchId] == shadyChild)

def isContainerForShareToken(denominationToken):
    denominationTokenMarket = denominationToken.getMarket()
    if (not denominationTokenMarket):
        return(0)
    denominationTokenBranch = denominationTokenMarket.getBranch()
    if (not denominationTokenBranch):
        return(0)
    if (not denominationToken.isShareToken()):
        return(0)
    return(1)
